name: Post ICA Hansa & La Gare Lunch with Slack Bot

on:
  workflow_dispatch:
  schedule:
    - cron: '05 9 * * 1-5'  # 11:05 Swedish time CEST Mon-Fri

jobs:
  post-lunch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install system dependencies (Chrome, Chromedriver, Tesseract)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            tesseract-ocr tesseract-ocr-swe \
            chromium-browser chromium-chromedriver \
            libglib2.0-0 libnss3 libgconf-2-4 libfontconfig1 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxi6 libxtst6 libxrandr2 libasound2 libatk1.0-0 libatk-bridge2.0-0 libcups2 libdrm2 libdbus-1-3 libxkbcommon0 libgbm1 libpango-1.0-0 libcairo2

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install selenium pillow pytesseract requests instaloader openai

      - name: Configure environment
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
        run: |
          echo "OPENAI_KEY is set? $([ -n \"$OPENAI_KEY\" ] && echo yes || echo no)"
          echo "Using chromium at: $(which chromium-browser || which chromium || true)"
          echo "Using chromedriver at: $(which chromedriver || which chromium-chromedriver || true)"
          python -c "import pytesseract, shutil; print('tesseract:', shutil.which('tesseract'))"

      - name: Generate menu.json by running scraper
        env:
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
        run: |
          # Point Selenium to Chromium/Chromedriver if needed
          export CHROME_BIN=$(which chromium-browser || which chromium)
          export CHROMEDRIVER=$(which chromedriver || which chromium-chromedriver)
          python scraper.py

      - name: Read lunch menus
        id: menu
        run: |
          # Extract ICA menu
          ICA_FORMATTED=$(jq -r '."ICA Supermarket Hansa".formatted // "Ingen meny hittades"' menu.json)
          echo "ICA_FORMATTED<<EOF" >> $GITHUB_OUTPUT
          echo "$ICA_FORMATTED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Extract La Gare menu
        LAGARE_FORMATTED=$(jq -r '."La Gare Malm√∂".formatted // "Ingen meny hittades"' menu.json)
          echo "LAGARE_FORMATTED<<EOF" >> $GITHUB_OUTPUT
          echo "$LAGARE_FORMATTED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post message to Slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          # Create the combined message using heredoc
          MESSAGE=$(cat << 'EOF'
          üçΩÔ∏è *Dagens lunch:*
          
          üè™ *ICA Hansa:*
          ${{ steps.menu.outputs.ICA_FORMATTED }}
          
          ü•ñ *La Gare:*
          ${{ steps.menu.outputs.LAGARE_FORMATTED }}
          EOF
          )
          
          # Post to Slack with proper JSON escaping
          curl -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-type: application/json" \
            -d "$(jq -n --arg channel "$CHANNEL_ID" --arg text "$MESSAGE" '{channel: $channel, text: $text}')"
